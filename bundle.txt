//racheli
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\Controllers\DriverController.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
namespace DotenetProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DriverController : ControllerBase
    {
        private readonly IDriverService _DriverService;
        public DriverController(IDriverService driverService)
        {
            _DriverService = driverService;
        }
      //  GET: api/<DriverController>
        [HttpGet]
        public IActionResult GetAll()
        {
            return Ok(_DriverService.GetDrivers());
        }
      //  GET api/<DriverController>/5
        [HttpGet("{id}")]
        public ActionResult<Driver> GetOne(int id)
        {
            return _DriverService.GetDriver(id);
        }
      //  POST api/<DriverController>
        [HttpPost]
        public void Post([FromBody] Driver d)
        {
            _DriverService.AddDriver(d);
        }
       // PUT api/<DriverController>/5
        [HttpPut("{id}")]
        public ActionResult<Driver> PutDriver(int id, [FromBody] Driver d)
        {
            return Ok(_DriverService.UpdateDriver(id, d));
        }
        //DELETE api/<DriverController>/5
        [HttpDelete("{id}")]
        public ActionResult<Driver> Delete(int id)
        {
            _DriverService.DeleteDriver(id);
            return Ok();
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\Controllers\OrderController.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
namespace DotenetProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class OrderController : ControllerBase
    {
        private readonly IOrderService _orderService;
        public OrderController(IOrderService orderService)
        {
            _orderService = orderService;
        }
        // GET: api/<PassangerController>
        [HttpGet]
        public IEnumerable<Order> GetAll()
        {
            return _orderService.GetOrders();
        }
        // GET api/<PassangerController>/5
        [HttpGet("{id}")]
        public ActionResult<Order> GetOne(int id)
        {
            return _orderService.GetOrder(id);
        }
        // POST api/<PassangerController>
        [HttpPost]
        public void Post([FromBody] Order o)
        {
            _orderService.AddOrder(o);
        }
        // PUT api/<PassangerController>/5
        [HttpPut("{id}")]
        public ActionResult<Order> Put(int id, [FromBody] Order o)
        {
            return Ok(_orderService.UpdateOrder(id, o));
        }
        // DELETE api/<PassangerController>/5
        [HttpDelete("{id}")]
        public ActionResult<Order> Delete(int id)
        {
            _orderService.DeleteOrder(id);
            return Ok();
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\Controllers\TaxiController.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Net.Sockets;
namespace DotenetProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TaxiController : ControllerBase
    {
        private readonly ITaxiService _taxiService;
        public TaxiController(ITaxiService taxiService)
        {
            _taxiService = taxiService;
        }
        // GET: api/<TaxiController>
        [HttpGet]
        public IEnumerable<Taxi> Get()
        {
            return _taxiService.GetTaxis();
        }
        // GET api/<TaxiController>/5
        [HttpGet("{id}")]
        public ActionResult<Taxi> Get(int id)
        {
            return _taxiService.GetTaxi(id);
        }
        // POST api/<TaxiController>
        [HttpPost]
        public void Post([FromBody] Taxi t)
        {
            _taxiService.AddTaxi(t);
        }
        // PUT api/<TaxiController>/5
        [HttpPut("{id}")]
        public ActionResult<Taxi> Put(int id, [FromBody] Taxi t)
        {
            return Ok(_taxiService.UpdateTaxi(id, t));
        }
        // DELETE api/<TaxiController>/5
        [HttpDelete("{id}")]
        public ActionResult<Taxi> Delete(int id)
        {
            _taxiService.DeleteTaxi(id);
            return Ok();
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\obj\Debug\net6.0\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = "")]
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\obj\Debug\net6.0\DotenetProject.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("DotenetProject")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("DotenetProject")]
[assembly: System.Reflection.AssemblyTitleAttribute("DotenetProject")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\obj\Debug\net6.0\DotenetProject.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\obj\DotenetProject.csproj.nuget.g.targets
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ImportGroup Condition=" '$(ExcludeRestorePackageImports)' != 'true' ">
    <Import Project="$(NuGetPackageRoot)microsoft.extensions.apidescription.server\3.0.0\build\Microsoft.Extensions.ApiDescription.Server.targets" Condition="Exists('$(NuGetPackageRoot)microsoft.extensions.apidescription.server\3.0.0\build\Microsoft.Extensions.ApiDescription.Server.targets')" />
  </ImportGroup>
</Project>
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\DotenetProject\Program.cs
using DotenetProject.Solid.Core.Repositories;
using DotenetProject.Solid.Core.Services;
using DotenetProject.Solid.Data;
using DotenetProject.Solid.Data.Repositories;
using DotenetProject.Solid.Services;
var builder = WebApplication.CreateBuilder(args);
// Add services to the container.
builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<ITaxiService, TaxiService>();
builder.Services.AddScoped<IOrderService, OrderService>();
builder.Services.AddScoped<IDriverService, DriverService>();
builder.Services.AddScoped<ITaxiRepository, TaxiRepository>();
builder.Services.AddScoped<IOrderRepository, OrderRepository>();
builder.Services.AddScoped<IDriverRepository, DriverRepository>();
builder.Services.AddDbContext<DataContext>();
var app = builder.Build();
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Enitities\Driver.cs
namespace DotenetProject.Solid.Core.Enitities
{
    public class Driver
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public Driver(int id, string name)
        {
            Id = id;
            Name = name;
        }
        public Taxi Taxi { get; set; }
        public int TaxiId { get; set; }
        public List<Order> Orders { get; set; }
        public Driver() { }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Enitities\Order.cs
namespace DotenetProject.Solid.Core.Enitities
{
    public class Order
    {
        public string Source { get; set; }
        public int Id { get; set; }
        public string Destination { get; set; }
        public DateTime Order_time { get; set; }
        public Order(string source, int id, string destination, DateTime order_time)
        {
            Source = source;
            Id = id;
            Destination = destination;
            Order_time = order_time;
        }
        public Driver Driver { get; set; }
        public Order() { }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Enitities\Taxi.cs
namespace DotenetProject.Solid.Core.Enitities
{
    public class Taxi
    {
        public int Id { get; set; }
        public bool IsAvailable { get; set; }
        public Taxi(int id, bool isAvailable)
        {
            Id = id;
            IsAvailable = isAvailable;
        }
        public Driver Driver { get; set; }
        public Taxi() { }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\obj\Debug\net6.0\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = "")]
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\obj\Debug\net6.0\Solid.core.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Solid.core")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Solid.core")]
[assembly: System.Reflection.AssemblyTitleAttribute("Solid.core")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\obj\Debug\net6.0\Solid.core.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\obj\Solid.core.csproj.nuget.g.targets
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Repositories\IDriverRepository.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Repositories
{
    public interface IDriverRepository
    {
        List<Driver> GetDrivers();
        Driver GetById(int id);
        Driver AddDriver(Driver user);
        Driver UpdateDriver(int id, Driver user);
        void DeleteDriver(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Repositories\IOrderRepository.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Repositories
{
    public interface IOrderRepository
    {
        List<Order> GetOrders();
        Order GetById(int id);
        Order AddOrder(Order order);
        Order UpdateOrder(int id, Order order);
        void DeleteOrder(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Repositories\ITaxiRepository.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Repositories
{
    public interface ITaxiRepository
    {
        List<Taxi> GetTaxis();
        Taxi GetById(int id);
        Taxi AddTaxi(Taxi order);
        Taxi UpdateTaxi(int id, Taxi order);
        void DeleteTaxi(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Services\IDriverService.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Services
{
    public interface IDriverService
    {
        List<Driver> GetDrivers();
        Driver GetDriver(int id);
        Driver AddDriver(Driver user);
        Driver UpdateDriver(int id, Driver user);
        void DeleteDriver(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Services\IOrderService.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Services
{
    public interface IOrderService
    {
        List<Order> GetOrders();
        Order GetOrder(int id);
        Order AddOrder(Order order);
        Order UpdateOrder(int id, Order order);
        void DeleteOrder(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.core\Services\ITaxiService.cs
using DotenetProject.Solid.Core.Enitities;
namespace DotenetProject.Solid.Core.Services
{
    public interface ITaxiService
    {
        List<Taxi> GetTaxis();
        Taxi GetTaxi(int id);
        Taxi AddTaxi(Taxi order);
        Taxi UpdateTaxi(int id, Taxi order);
        void DeleteTaxi(int id);
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\DataContext.cs
using DotenetProject.Solid.Core.Enitities;
using Microsoft.EntityFrameworkCore;
namespace DotenetProject.Solid.Data
{
    public class DataContext: DbContext
    {
        public DbSet<Order> orders { get; set; }
        public DbSet<Taxi> taxies { get; set; }
        public DbSet<Driver> drivers { get; set; }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Server=(localdb)\\MSSQLLocalDB;Database=racheli_db");
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Migrations\20240104224406_Init.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;
#nullable disable
namespace Solid.Data.Migrations
{
    public partial class Init : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "taxies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsAvailable = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_taxies", x => x.Id);
                });
            migrationBuilder.CreateTable(
                name: "drivers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TaxiId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_drivers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_drivers_taxies_TaxiId",
                        column: x => x.TaxiId,
                        principalTable: "taxies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });
            migrationBuilder.CreateTable(
                name: "orders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Source = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Destination = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Order_time = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DriverId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_orders_drivers_DriverId",
                        column: x => x.DriverId,
                        principalTable: "drivers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });
            migrationBuilder.CreateIndex(
                name: "IX_drivers_TaxiId",
                table: "drivers",
                column: "TaxiId",
                unique: true);
            migrationBuilder.CreateIndex(
                name: "IX_orders_DriverId",
                table: "orders",
                column: "DriverId");
        }
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "orders");
            migrationBuilder.DropTable(
                name: "drivers");
            migrationBuilder.DropTable(
                name: "taxies");
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Migrations\20240104224406_Init.Designer.cs
// <auto-generated />
using System;
using DotenetProject.Solid.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
#nullable disable
namespace Solid.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240104224406_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("TaxiId")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.HasIndex("TaxiId")
                        .IsUnique();
                    b.ToTable("drivers");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("DriverId")
                        .HasColumnType("int");
                    b.Property<DateTime>("Order_time")
                        .HasColumnType("datetime2");
                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.HasIndex("DriverId");
                    b.ToTable("orders");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Taxi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");
                    b.HasKey("Id");
                    b.ToTable("taxies");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.HasOne("DotenetProject.Solid.Core.Enitities.Taxi", "Taxi")
                        .WithOne("Driver")
                        .HasForeignKey("DotenetProject.Solid.Core.Enitities.Driver", "TaxiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Taxi");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Order", b =>
                {
                    b.HasOne("DotenetProject.Solid.Core.Enitities.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Driver");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.Navigation("Orders");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Taxi", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Migrations\DataContextModelSnapshot.cs
// <auto-generated />
using System;
using DotenetProject.Solid.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
#nullable disable
namespace Solid.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("TaxiId")
                        .HasColumnType("int");
                    b.HasKey("Id");
                    b.HasIndex("TaxiId")
                        .IsUnique();
                    b.ToTable("drivers");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<int>("DriverId")
                        .HasColumnType("int");
                    b.Property<DateTime>("Order_time")
                        .HasColumnType("datetime2");
                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.HasIndex("DriverId");
                    b.ToTable("orders");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Taxi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);
                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");
                    b.HasKey("Id");
                    b.ToTable("taxies");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.HasOne("DotenetProject.Solid.Core.Enitities.Taxi", "Taxi")
                        .WithOne("Driver")
                        .HasForeignKey("DotenetProject.Solid.Core.Enitities.Driver", "TaxiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Taxi");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Order", b =>
                {
                    b.HasOne("DotenetProject.Solid.Core.Enitities.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Driver");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Driver", b =>
                {
                    b.Navigation("Orders");
                });
            modelBuilder.Entity("DotenetProject.Solid.Core.Enitities.Taxi", b =>
                {
                    b.Navigation("Driver")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\obj\Debug\net6.0\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = "")]
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\obj\Debug\net6.0\Solid.Data.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Solid.Data")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Solid.Data")]
[assembly: System.Reflection.AssemblyTitleAttribute("Solid.Data")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\obj\Debug\net6.0\Solid.Data.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\obj\Solid.Data.csproj.nuget.g.targets
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Repositories\DriverRepository.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using Microsoft.EntityFrameworkCore;
using System.Data;
using static DotenetProject.Solid.Data.Repositories.DriverRepository;
namespace DotenetProject.Solid.Data.Repositories
{
    public class DriverRepository : IDriverRepository
    {
        private readonly DataContext _context;
        public DriverRepository(DataContext context)
        {
            _context = context;
        }
       public List<Driver> GetDrivers()
        {
            return _context.drivers.ToList();
        }
        public Driver AddDriver(Driver d)
        {
            _context.drivers.Add(d);
            _context.SaveChanges();
            return d;
        }
        public void DeleteDriver(int id)
        {
            _context.drivers.Remove(_context.drivers.ToList().Find(x => x.Id == id));
            _context.SaveChanges();
        }
        public Driver GetById(int id)
        {
            return _context.drivers.ToList().Find(d => d.Id == id);
        }
        public Driver UpdateDriver(int id, Driver d)
        {
            var updateDriver = _context.drivers.ToList().Find(d => d.Id == id);
            if (updateDriver != null)
            {
                updateDriver.Name = d.Name;
                _context.SaveChanges();
                return updateDriver;
            }
            return null;
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Repositories\OrderRepository.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
namespace DotenetProject.Solid.Data.Repositories
{
    public class OrderRepository:IOrderRepository
    {
        private readonly DataContext _context;
        public OrderRepository(DataContext context)
        {
            _context = context;
        }
        public Order AddOrder(Order o)
        {
            _context.orders.Add(o);
            _context.SaveChanges();
            return o;
        }
        public void DeleteOrder(int id)
        {
            _context.orders.Remove(_context.orders.ToList().Find(x => x.Id == id));
            _context.SaveChanges();
        }
        public Order GetById(int id)
        {
            return _context.orders.ToList().Find(o => o.Id == id);
        }
        public List<Order> GetOrders()
        {
            return _context.orders.ToList();
        }
        public Order UpdateOrder(int id, Order o)
        {
            var updateOrder = _context.orders.ToList().Find(o => o.Id == id);
            if (updateOrder != null)
            {
                updateOrder.Order_time = o.Order_time;
                updateOrder.Source = o.Source;
                updateOrder.Destination = o.Destination;
                _context.SaveChanges();
                return updateOrder;
            }
            return null;
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Data\Repositories\TaxiRepository.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using Microsoft.EntityFrameworkCore;
namespace DotenetProject.Solid.Data.Repositories
{
    public class TaxiRepository:ITaxiRepository
    {
        private readonly DataContext _context;
        public TaxiRepository(DataContext context)
        {
            _context = context;
        }
        public Taxi AddTaxi(Taxi t)
        {
            _context.taxies.Add(t);
            return t;
        }
        public void DeleteTaxi(int id)
        {
            _context.taxies.Remove(_context.taxies.ToList().Find(t => t.Id == id));
            _context.SaveChanges();
        }
        public Taxi GetById(int id)
        {
            return _context.taxies.ToList().Find(o => o.Id == id);
        }
        public List<Taxi> GetTaxis()
        {
            return _context.taxies.ToList();
        }
        public Taxi UpdateTaxi(int id, Taxi t)
        {
            var updateTaxi = _context.taxies.ToList().Find(t => t.Id == id);
            if (updateTaxi != null)
            {
                updateTaxi.IsAvailable = t.IsAvailable;
                _context.SaveChanges();
                return updateTaxi;
            }
            return null;
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\DriverService.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using DotenetProject.Solid.Core.Services;
using static DotenetProject.Solid.Services.DriverService;
namespace DotenetProject.Solid.Services
{
    public class DriverService : IDriverService
    {
        private readonly IDriverRepository _DriverRepository;
        public DriverService(IDriverRepository DriverRepository)
        {
            _DriverRepository = DriverRepository;
        }
        public List<Driver> GetDrivers()
        {
            return _DriverRepository.GetDrivers();
        }
        public Driver GetDriver(int id)
        {
            return _DriverRepository.GetById(id);
        }
        public Driver AddDriver(Driver d)
        {
           return _DriverRepository.AddDriver(d);
        }
        public Driver UpdateDriver(int id, Driver d)
        {
          return _DriverRepository.UpdateDriver(id, d);   
        }
        public void DeleteDriver(int id)
        {
            _DriverRepository.DeleteDriver(id); 
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\obj\Debug\net6.0\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = "")]
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\obj\Debug\net6.0\Solid.Service.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("Solid.Service")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Solid.Service")]
[assembly: System.Reflection.AssemblyTitleAttribute("Solid.Service")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\obj\Debug\net6.0\Solid.Service.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\obj\Solid.Service.csproj.nuget.g.targets
<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\OrderService.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using DotenetProject.Solid.Core.Services;
namespace DotenetProject.Solid.Services
{
    public class OrderService:IOrderService
    {
        private readonly IOrderRepository _OrderRepository;
        public OrderService(IOrderRepository OrderRepository)
        {
            _OrderRepository = OrderRepository;
        }
        public List<Order> GetOrders()
        {
            return _OrderRepository.GetOrders();
        }
        public Order GetOrder(int id)
        {
            return _OrderRepository.GetById(id);
        }
        public Order AddOrder(Order order)
        {
            return _OrderRepository.AddOrder(order);
        }
        public Order UpdateOrder(int id, Order order)
        {
            return _OrderRepository.UpdateOrder(id,order);
        }
        public void DeleteOrder(int id)
        {
            _OrderRepository.DeleteOrder(id);
        }
    }
}
// the file name: C:\Users\user1\Desktop\dotnet\Taxi-Station\Solid.Service\TaxiService.cs
using DotenetProject.Solid.Core.Enitities;
using DotenetProject.Solid.Core.Repositories;
using DotenetProject.Solid.Core.Services;
namespace DotenetProject.Solid.Services
{
    public class TaxiService:ITaxiService
    {
        private readonly ITaxiRepository _TaxiRepository;
        public TaxiService(ITaxiRepository TaxiRepository)
        {
            _TaxiRepository = TaxiRepository;
        }
        public List<Taxi> GetTaxis()
        {
            return _TaxiRepository.GetTaxis();
        }
        public Taxi GetTaxi(int id)
        {
            return _TaxiRepository.GetById(id);
        }
        public Taxi AddTaxi(Taxi t)
        {
           return _TaxiRepository.AddTaxi(t);
        }
        public Taxi UpdateTaxi(int id, Taxi t)
        {
            return (_TaxiRepository.UpdateTaxi(id, t)); 
        }
        public void DeleteTaxi(int id)
        {
            _TaxiRepository.DeleteTaxi(id);
        }
    }
}
